; OM File Header - Saved 2008/11/07 13:50:38
; (6.04 :patc (om-make-point 34 65) (om-make-point 50 50) (om-make-point 836 760) "No documentation " 183 0 nil "2008/11/06 15:41:32")
; End File Header
(in-package :om)(load-lib-for (quote ("esquisse")))(setf *om-current-persistent* (om-load-patch1 "désintégrations" (quote ((om-load-boxcomment "comment" (om-make-point 451 42) (quote "Open this editor and select the \"offset\" item in the bottom-right menu. You should play it on a Midi device with the 4 first midi channels detuned by a 1/8 tone step.") "" (om-make-point 152 653) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 87 35) (quote "The reference spectrum") "" (om-make-point 307 245) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 110 67) (quote "The note offsets inside each chord are computed in order to have an arpeggio. ") "" (om-make-point 497 417) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 134 38) (quote "This is just to show the curve.") "" (om-make-point 516 342) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 435 234) (om-make-point 20 28) 9 "9" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 402 235) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 203 86) (quote "The output of the lambda patch is a function. Now this function is sampled through the values 1 to 9.$These (decreasing) values will be used as the delays between chords.") "" (om-make-point 520 244) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 105 158) (quote "For each of these tranpositions, the whole spectrum is stretched proportionally, thus becoming less and less harmonic.$Eight chords are built this way.$") "" (om-make-point 7 236) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 64 83) (om-make-point 20 28) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 204 64) (quote "This lambda patch contains the equation of segment of parabol passing through the 2 x,y points given as arguments") "" (om-make-point 492 168) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 102 29) (om-make-point 20 28) 8 "8" nil) (om-load-boxcomment "comment" (om-make-point 126 43) (quote "spectrum partial numbers") "" (om-make-point 271 80) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 79 24) (quote "Fundamental") "" (om-make-point 252 50) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 398 35) (quote "From Désintégration by Tristan Murail") "" (om-make-point 269 8) nil (om-make-color 67/85 26/255 58/255) (om-make-font "Arial" 18.0 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 453 321) (om-make-point 50 52) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8)) (quote (6000 5842 5580 5212 4740 4162 3480 2692 1800)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (pairlis (quote (obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems)) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 432 439) nil nil nil (list (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 138 63) (om-make-point 88 79) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100)) (quote (0 25 40 52 61 69 75 81 86 91 95)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems)) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 174 358) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 174 294) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 231 250) (om-make-point 56 35) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist1" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 292 122) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 1 103) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 85 151) nil nil nil nil 1) (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 100) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10) (om-load-inputfun (quote input-funbox) "a number" "COEFF" 0.01) (om-load-inputfun (quote input-funbox) "an integer" "NBDEC" 4))) (om-make-point 149 196) nil nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 303 52) "no documentation" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 283 449) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 71 450) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (3 0 2 0 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (8 0 4 0 nil 0) (9 0 5 0 nil 0) (5 0 6 0 nil 0) (0 0 7 0 nil 0) (6 0 7 3 nil 0) (1 1 10 0 nil 0) (1 0 11 0 nil 0))) 1 "omloop1" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 156 147) (om-make-point 26 28) 12 "12" nil) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 488 135) (om-make-point 32 28) 180 "180" nil) (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 459 124) (om-make-point 20 28) 9 "9" nil) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 420 136) (om-make-point 32 28) 600 "600" nil) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 393 131) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcomment "comment" (om-make-point 79 27) (quote "a X^2 + b") "" (om-make-point 185 401) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 0 110) (om-make-point 48 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 5 349) (om-make-point 48 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 125 398) (om-make-point 55 35) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 104 23) (quote "b =Y0 - a.X0^2") "" (om-make-point 188 299) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 139 295) (om-make-point 47 27) nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 68 252) (om-make-point 48 35) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 164 27) (quote "a = (Y1-Y0)/(X1^2 - X0^2)") "" (om-make-point 243 219) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 185 214) (om-make-point 53 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 101 178) (om-make-point 47 27) nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 62 111) (om-make-point 48 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 201 139) (om-make-point 48 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 279 128) (om-make-point 47 27) nil nil nil 1) (om-load-boxin "input4" 4 (om-make-point 285 45) "no documentation" "Y1" nil nil) (om-load-boxout "output" 0 (om-make-point 131 454) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input3" 3 (om-make-point 215 45) "no documentation" "X1" nil nil) (om-load-boxin "input2" 2 (om-make-point 145 45) "no documentation" "Y0" nil nil) (om-load-boxin "input1" 1 (om-make-point 75 45) "no documentation" "X0" nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" "X" nil nil))) (quote ((18 0 1 0 nil 0) (18 0 1 1 nil 0) (1 0 2 0 nil 0) (8 0 2 1 ((om-make-point 209 247) (om-make-point 209 335) (om-make-point 37 335) (om-make-point 37 349)) 0) (2 0 3 0 nil 0) (5 0 3 1 nil 0) (16 0 5 0 nil 0) (6 0 5 1 nil 0) (10 0 6 0 nil 0) (8 0 6 1 nil 0) (12 0 8 0 ((om-make-point 301 153) (om-make-point 301 190) (om-make-point 226 190) (om-make-point 203 214)) 0) (9 0 8 1 nil 0) (11 0 9 0 nil 0) (10 0 9 1 nil 0) (17 0 10 0 nil 0) (17 0 10 1 nil 0) (15 0 11 0 nil 0) (15 0 11 1 nil 0) (13 0 12 0 nil 0) (16 0 12 1 nil 0) (3 0 14 0 nil 0))) 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input3" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input4" nil))) (om-make-point 387 166) (om-make-point 95 61) nil "l" nil) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 0.5))) (om-make-point 312 439) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND1" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 351 323) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 375 439) nil nil nil (list (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 356 95) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE1" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 60) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 5))) (om-make-point 292 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 228 292) (om-make-point 57 27) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 65) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 127))) (om-make-point 153 217) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 138 39) (om-make-point 88 79) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100)) (quote (100 75 60 48 39 31 25 19 14 9 5)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems)) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 170 387) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 161 326) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist1" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 290 190) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 1 103) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 46 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 100) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10) (om-load-inputfun (quote input-funbox) "a number" "COEFF" 1) (om-load-inputfun (quote input-funbox) "an integer" "NBDEC" 4))) (om-make-point 149 139) nil nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 300 42) "no documentation" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 283 449) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 71 450) nil nil nil 0)) (quote ((11 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (7 0 2 1 nil 0) (10 0 3 0 nil 0) (6 0 5 0 nil 0) (2 0 6 0 nil 0) (1 0 7 0 nil 0) (12 0 8 0 nil 0) (8 0 9 0 nil 0) (4 0 10 0 nil 0) (9 0 10 3 nil 0) (5 1 13 0 nil 0) (5 0 14 0 nil 0))) 1 "omloop1" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 555 490) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 263 438) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 1) (om-load-inputfun (quote input-funbox) "min" "XMIN" 1) (om-load-inputfun (quote input-funbox) "max" "XMAX" 9) (om-load-inputfun (quote input-funbox) "coeff" "COEFF" 10.0))) (om-make-point 385 263) nil nil nil nil 2) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 108 516) (om-make-point 509 133) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2800.0 4702.0 5586.0 6168.0 6604.0 7102.0 7488.0 7804.0 8070.0 8372.0 8630.0) (2800.0 4724.106 5618.3804 6207.1445 6648.212 7152.0 7542.4863 7862.159 8131.2505 8436.761 8697.759) (2800.0 4746.212 5650.7607 6246.289 6692.424 7202.0 7596.9727 7920.318 8192.501 8501.521 8765.519) (2800.0 4768.318 5683.1406 6285.4336 6736.6357 7252.0 7651.459 7978.477 8253.752 8566.281 8833.277) (2800.0 4790.424 5715.521 6324.578 6780.848 7302.0 7705.9453 8036.6357 8315.002 8631.042 8901.037) (2800.0 4812.53 5747.9014 6363.723 6825.06 7352.0 7760.4316 8094.795 8376.253 8695.803 8968.796) (2800.0 4834.6357 5780.2817 6402.8677 6869.272 7402.0 7814.9175 8152.954 8437.504 8760.563 9036.555) (2800.0 4856.742 5812.662 6442.012 6913.484 7452.0 7869.404 8211.113 8498.754 8825.324 9104.314) (2800.0 4878.848 5845.0425 6481.1567 6957.696 7502.0 7923.89 8269.271 8560.005 8890.085 9172.073))) :lonset (quote (0 6000 11843 17423 22636 27376 31539 35019 37712 39512)) :ldur (quote ((12000 12000 12000 12000 12000 12000 12000 12000 12000 12000 12000) (11686 11686 11686 11686 11686 11686 11686 11686 11686 11686 11686) (11160 11160 11160 11160 11160 11160 11160 11160 11160 11160 11160) (10426 10426 10426 10426 10426 10426 10426 10426 10426 10426 10426) (9480 9480 9480 9480 9480 9480 9480 9480 9480 9480 9480) (8326 8326 8326 8326 8326 8326 8326 8326 8326 8326 8326) (6960 6960 6960 6960 6960 6960 6960 6960 6960 6960 6960) (5386 5386 5386 5386 5386 5386 5386 5386 5386 5386 5386) (3600 3600 3600 3600 3600 3600 3600 3600 3600 3600 3600))) :lvel (quote ((67 51 41 33 27 22 18 14 11 8 5) (79 62 53 45 39 34 30 26 23 19 17) (89 73 63 55 49 44 40 36 33 30 27) (98 82 72 64 58 53 49 45 42 39 36) (106 89 79 72 66 60 57 53 49 46 44) (112 95 86 78 72 67 63 59 56 52 50) (117 100 90 83 77 71 68 64 60 57 55) (120 104 94 86 80 75 71 67 64 61 58) (122 106 96 88 82 77 73 69 66 63 60))) :loffset (quote ((0 1500 2400 3120 3660 4140 4500 4860 5160 5460 5700) (0 1461 2337 3038 3564 4032 4382 4733 5025 5317 5551) (0 1395 2232 2902 3404 3850 4185 4520 4799 5078 5301) (0 1303 2085 2711 3180 3597 3910 4223 4483 4744 4952) (0 1185 1896 2465 2891 3271 3555 3839 4076 4313 4503) (0 1041 1665 2165 2539 2872 3122 3372 3580 3788 3955) (0 870 1392 1810 2123 2401 2610 2819 2993 3167 3306) (0 673 1077 1400 1643 1858 2020 2181 2316 2451 2558) (0 450 720 936 1098 1242 1350 1458 1548 1638 1710))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict show-stems)) (list nil nil 0 0 2621450 18350450 4 1000 nil 19/50 0 0 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote t))) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 151 377) nil nil nil (list (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1.0))) (om-make-point 146 312) (om-make-point 42 35) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 79 257) nil nil nil nil 3) (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 214 119) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 74 190) (om-make-point 99 53) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 20 85) nil nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 254 44) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 136 45) "no documentation" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 23 30) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 148 380) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 15 345) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (3 0 1 0 nil 0) (5 0 2 0 nil 0) (5 0 3 0 ((om-make-point 272 95) (om-make-point 214 95) (om-make-point 90 143) (om-make-point 90 190)) 0) (2 0 3 1 nil 0) (4 0 3 2 nil 0) (2 0 3 3 nil 0) (6 0 3 4 nil 0) (7 0 4 0 nil 0) (0 0 8 0 nil 0) (1 0 9 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote genfun) "NTH-HARM" (quote nth-harm) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Partial-numbers" "NTH" 12) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" 1 (list (list "Midics" 1) (list "Freqs" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" 2 (list (list "Chord" 2) (list "ChordSeq" 1))))) (om-make-point 147 211) nil nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 239 288) (om-make-point 54 112) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800 4702 5586 6168 6604 7102 7488 7804 8070 8372 8630)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil nil nil nil))) thechord) nil nil (pairlis (quote (scale microplay obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict show-stems)) (list nil nil 0 0 2621450 18350450 0 1000 nil 1 0 0 8 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 273 123) (om-make-point 95 36) (list 1 3 5 7 9 12 15 18 21 25 29) "(1 3 5 7 9 12 15 18 21 25 29)" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 193 47) (om-make-point 59 135) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) "x" nil (pairlis (quote (scale microplay obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict show-stems)) (list nil nil 0 0 2621450 18350450 0 1000 nil 1 0 0 8 24 (quote gff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "NTH-HARM" (quote nth-harm) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Partial-numbers" "NTH" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" 1 (list (list "Midics" 1) (list "Freqs" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" 2 (list (list "Chord" 2) (list "ChordSeq" 1))))) (om-make-point 231 213) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 122 285) (om-make-point 31 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 144 38) (om-make-point 26 28) 50 "50" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 8))) (om-make-point 95 72) (om-make-point 31 35) nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 87 117) nil nil nil nil 1))) (quote ((27 1 14 0 nil 0) (29 0 15 0 nil 0) (23 0 15 1 nil 0) (20 0 21 1 nil 0) (19 0 21 2 nil 0) (18 0 21 3 nil 0) (17 0 21 4 nil 0) (23 0 22 0 nil 0) (27 0 23 0 nil 0) (29 0 24 0 nil 0) (23 0 24 1 nil 0) (23 0 26 1 nil 0) (21 0 27 0 ((om-make-point 433 230) (om-make-point 395 229) (om-make-point 395 246) (om-make-point 395 263)) 0) (5 0 27 2 nil 0) (4 0 27 3 nil 0) (29 0 28 1 nil 0) (26 0 28 2 nil 0) (22 0 28 3 nil 0) (24 0 28 4 nil 0) (15 0 28 5 nil 0) (25 0 28 7 nil 0) (35 0 29 0 nil 0) (30 0 29 1 nil 0) (31 1 29 2 nil 0) (33 1 30 0 nil 0) (16 0 30 1 nil 0) (34 0 31 1 nil 0) (33 1 34 0 nil 0) (32 0 34 1 nil 0) (38 0 35 0 nil 0) (30 0 35 1 nil 0) (36 0 37 0 nil 0) (10 0 37 1 nil 0) (8 0 38 0 nil 0) (37 0 38 1 nil 0) (36 0 38 2 nil 0))) nil 6.04))
